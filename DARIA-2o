{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e7fa3b0-0416-4ddf-81ad-dc7b65115cef",
   "metadata": {},
   "source": [
    "----\n",
    "DARIA 2.0 Q&A System Documentation\n",
    "----- \n",
    "Overview\n",
    "DARIA 2.0 is a simple Question and Answer (Q&A) system that uses Wikipedia to fetch information based on user input. It leverages Named Entity Recognition (NER) and pattern matching to detect question types and fetch relevant answers using Wikipedia's API. The program also logs the questions and answers to a file.\n",
    "\n",
    "Key Features\n",
    "Accepts user input questions related to people, places, events, and dates.\n",
    "Automatically detects question types like Who, What, When, and Where.\n",
    "Queries Wikipedia for a brief summary to answer questions.\n",
    "Logs both questions and answers to a text file.\n",
    "Provides alternative phrases when the answer is not found.\n",
    "Requirements\n",
    "Before running the program, ensure that you have the following dependencies installed:\n",
    "\n",
    "Python Packages\n",
    "wikipedia-api (for fetching summaries from Wikipedia)\n",
    "nltk (for Named Entity Recognition)\n",
    "re (for regular expressions)\n",
    "sys (for file handling)\n",
    "datetime (for date manipulation)\n",
    "Install Required Libraries\n",
    "You can install the necessary libraries using pip in your Jupyter Notebook or command line:\n",
    "\n",
    "----\n",
    "Added partial Q & A for extra credit.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "2f1e58c7-0c52-4ca0-bb1f-1a7a5d13efe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi! I'm DARIA 2o Q&A System. How can I help you today?\n",
      "Please enter a valid question, or type 'exit' to exit from the program:\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " who is Albert Einstein?\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Albert Einstein ( EYEN-styne; German: [ˈalbɛɐt ˈʔaɪnʃtaɪn] ; 14 March 1879 – 18 April 1955) was a German-born theoretical physicist who is widely held as one of the most influential scientists.\n",
      "\n",
      "Feel free to ask another question, or type 'exit' if you're done \n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " exit\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Thanks you! Bye! :)\n",
      "\n"
     ]
    },
    {
     "ename": "SystemExit",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "An exception has occurred, use %tb to see the full traceback.\n",
      "\u001b[0;31mSystemExit\u001b[0m\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.12/site-packages/IPython/core/interactiveshell.py:3585: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n",
      "  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"
     ]
    }
   ],
   "source": [
    "import wikipedia\n",
    "import sys\n",
    "import re\n",
    "from nltk.chunk import tree2conlltags\n",
    "from nltk import word_tokenize, pos_tag, ne_chunk\n",
    "from datetime import datetime\n",
    "\n",
    "\n",
    "def start_program():\n",
    "    try:\n",
    "        print(\"Hi! I'm DARIA 2o Q&A System. How can I help you today?\")\n",
    "        log_file = open(\"/Users/saivaruntanjoreraghavendra/Desktop/fall 2024/questions_and_answers_log.txt\", \"w+\")  # Open the log file\n",
    "        print(\"Please enter a valid question, or type 'exit' to exit from the program:\\n\")\n",
    "        question_counter = 1\n",
    "        while True:\n",
    "            user_input = input()\n",
    "            if user_input.lower() == \"exit\":  \n",
    "                print(\"\\nThanks you! Bye! :)\\n\")\n",
    "                sys.exit()  \n",
    "            \n",
    "            log_file.write(f\"Q{question_counter}) {user_input}\\n\") \n",
    "            entity_flag = False\n",
    "            final_answer = \"\"\n",
    "            wiki_answer = \"\"\n",
    "\n",
    "            if user_input.strip():  \n",
    "                user_input = user_input.title().rstrip('?!') \n",
    "                ner_result = extract_entities(user_input)\n",
    "                question_text = detect_question(user_input)\n",
    "\n",
    "                if question_text:\n",
    "                    if (\"Where\" in user_input or \"What\" in user_input):\n",
    "                        wiki_answer = fetch_wiki_summary(question_text, log_file)\n",
    "                        match = re.search(r'\\d{4}', wiki_answer)\n",
    "                        if match is not None:\n",
    "                            wiki_answer = \"\"\n",
    "                    \n",
    "                    if ('B-PERSON' in ner_result[2]) or ('I-PERSON' in ner_result[2]):\n",
    "                        entity_flag = True\n",
    "                    \n",
    "                    if \"Who\" in user_input and entity_flag:\n",
    "                        wiki_answer = fetch_wiki_summary(question_text, log_file)\n",
    "                    \n",
    "                    if \"When\" in user_input: \n",
    "                        wiki_answer = fetch_wiki_summary(question_text, log_file)\n",
    "                        result_text = extract_date_info(wiki_answer)\n",
    "                        if result_text:\n",
    "                            formatted_answer = format_answer(user_input, result_text)\n",
    "                            if formatted_answer:\n",
    "                                final_answer = formatted_answer\n",
    "                        else:\n",
    "                            final_answer = wiki_answer\n",
    "\n",
    "                    elif \"Age\" in user_input and entity_flag:\n",
    "                        wiki_answer = fetch_wiki_summary(question_text, log_file)\n",
    "                        result_text = extract_date_info(wiki_answer)\n",
    "                        if result_text:\n",
    "                            match = re.search(r'\\d{4}', result_text)\n",
    "                            if match:\n",
    "                                result_text = datetime.now().year - int(match.group())\n",
    "                            formatted_answer = format_answer(user_input, result_text)\n",
    "                            if formatted_answer:\n",
    "                                final_answer = formatted_answer\n",
    "                        else:\n",
    "                            final_answer = \"\"\n",
    "                    else:\n",
    "                        final_answer = wiki_answer\n",
    "                else:\n",
    "                    final_answer = \"\"\n",
    "            else:\n",
    "                print(\"Please ask a valid question!\")\n",
    "\n",
    "            if final_answer == \"\":\n",
    "                log_file.write(f\"A{question_counter}) Answer not found.\\n\\n\")  \n",
    "                print(\"I'm afraid I don't have the information you're looking for.\\n\")\n",
    "            else:\n",
    "                try:\n",
    "                    log_file.write(f\"A{question_counter}) {final_answer}\\n\\n\")  \n",
    "                    print(final_answer + \"\\n\")\n",
    "                except Exception as general_exception:\n",
    "                    log_file.write(f\"A{question_counter}) Answer not found.\\n\\n\")  \n",
    "                    print(\"Hmm, I don't have that answer. How about trying a different question?\\n\")\n",
    "\n",
    "            question_counter += 1\n",
    "            print(\"Feel free to ask another question, or type 'exit' if you're done \\n\")\n",
    "    \n",
    "    except Exception as general_exception:\n",
    "        print(general_exception)\n",
    "    \n",
    "    finally:\n",
    "        log_file.close()  \n",
    "\n",
    "\n",
    "\n",
    "def extract_entities(sentence):\n",
    "    tokens = word_tokenize(sentence)\n",
    "    pos_tags = pos_tag(tokens)\n",
    "    named_entities = ne_chunk(pos_tags)\n",
    "    \n",
    "    \n",
    "    iob_tagged = tree2conlltags(named_entities)\n",
    "    \n",
    "    return iob_tagged\n",
    "\n",
    "\n",
    "# Function to detect question types\n",
    "def detect_question(question_input):  #Defining detect_question\n",
    "    question_result = \"\"\n",
    "    question_patterns = [[r'Where (Is|Was) (.+)', [\"{0}\"]],\n",
    "                         [r'Who (Is|Was) (.+)', [\"{0}\"]],\n",
    "                         [r'What (Is|Was) (.+) Age', [\"{0}\"]],\n",
    "                         [r'What (Is|Was) (.+)', [\"{0}\"]],\n",
    "                         [r'When (Is|Was) (.+) Born', [\"{0}\"]],\n",
    "                         [r'When (Is|Was) (.+) Birthday', [\"{0}\"]],\n",
    "                         [r'When (Did|Was) (.+)', [\"{0}\"]]]  \n",
    "    \n",
    "    for regex_pattern, template in question_patterns:\n",
    "        match = re.match(regex_pattern, question_input.rstrip('.!?'))\n",
    "        if match:\n",
    "            question_result = match.groups()[1]\n",
    "    \n",
    "    return question_result\n",
    "\n",
    "\n",
    "# Function to query Wikipedia\n",
    "def fetch_wiki_summary(query, log_file):\n",
    "    try:\n",
    "        query_result = wikipedia.summary(query, sentences=1)\n",
    "    except Exception as general_exception:\n",
    "        query_result = \"\"\n",
    "    return query_result\n",
    "\n",
    "\n",
    "def extract_date_info(summary_text):\n",
    "    match_result = \"\"\n",
    "    date_patterns = [[r'[\\d]+\\s(\\w)+\\s[\\d]+', [\"{0}\"]],\n",
    "                     [r'(?<=\\().(\\w+).(\\w+,).(\\w+)', [\"{0}\"]]]\n",
    "    \n",
    "    for regex_pattern, template in date_patterns:\n",
    "        match = re.search(regex_pattern, summary_text)\n",
    "        if match is not None:\n",
    "            match_result = match.group()\n",
    "    \n",
    "    return match_result\n",
    "\n",
    "\n",
    "def format_answer(user_question, answer_text):\n",
    "    user_question = user_question.rstrip('.!?') \n",
    "\n",
    "    formatted_answer = re.sub(r'When (Is|Was) (.+) Born', r'\\2 Was Born On ', user_question)\n",
    "    if formatted_answer != user_question:\n",
    "        return formatted_answer.strip() + \" \" + str(answer_text).strip() + '.' \n",
    "    \n",
    "    formatted_answer = re.sub(r'When (Is|Was) (.+) Birthday', r'\\2 Birthday Is On ', user_question)\n",
    "    if formatted_answer != user_question:\n",
    "        formatted_answer = formatted_answer.strip() + \" \" + str(answer_text).strip()\n",
    "        formatted_answer = re.sub(r'\\d{4}', '', formatted_answer) \n",
    "        return formatted_answer.strip() + '.' \n",
    "\n",
    "    # Generic \"When\" question format\n",
    "    formatted_answer = re.sub(r'When (Did|Was) (.+)', r'\\2 Happened On ', user_question)\n",
    "    if formatted_answer != user_question:\n",
    "        return formatted_answer.strip() + \" \" + str(answer_text).strip() + '.' \n",
    "\n",
    "    formatted_answer = re.sub(r'What (Is|Was) (.+) Age', r'\\2 Age Is ', user_question)\n",
    "    if formatted_answer != user_question:\n",
    "        return formatted_answer.strip() + \" \" + str(answer_text).strip() + '.' \n",
    "    return user_question.strip()  \n",
    "\n",
    "\n",
    "start_program()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "e62fcb24-803a-4b9a-a400-a3c045940b4e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#References\n",
    "\n",
    "#Python Software Foundation. (n.d.). re — Regular expression operations. Python 3. https://docs.python.org/3/library/re.html\n",
    "#The Wikipedia API (n.d.). Wikipedia API Documentation. https://pypi.org/project/wikipedia/\n",
    "#Programming Assignment:2 instructions. url: https://tinyurl.com/yaesxkw2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04af64fa-e1bd-4f99-9877-5523b938d6f9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
